@page
@model SenseNet.IndexTools.Web.Pages.Operations.ListItemsModel
@{
    ViewData["Title"] = "List Items";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>List Items</h1>
            <p class="lead">List items from index and/or database for a specific repository path.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5>List Items Settings</h5>
                </div>
                <div class="card-body">
                    <form method="post">
                        <div class="mb-3">
                            <label for="indexPath" class="form-label">Index Path</label>
                            <select class="form-select" id="indexPath" name="indexPath" required>
                                <option value="">Select an index path...</option>
                                @foreach (var path in Model.IndexPaths)
                                {
                                    <option value="@path.Path">@path.Name (@path.Path)</option>
                                }
                            </select>
                            <div class="form-text">Or enter a custom path:</div>
                            <input type="text" class="form-control mt-2" id="customIndexPath" name="customIndexPath" placeholder="D:\path\to\index">
                        </div>

                        <div class="mb-3">
                            <label for="connectionString" class="form-label">Database Connection (only needed when listing from database)</label>
                            <select class="form-select" id="connectionString" name="connectionString">
                                <option value="">Select a database connection...</option>
                                @foreach (var conn in Model.DatabaseConnections)
                                {
                                    <option value="@conn.ConnectionString">@conn.Name</option>
                                }
                            </select>
                            <div class="form-text">Or enter a custom connection string:</div>
                            <input type="text" class="form-control mt-2" id="customConnectionString" name="customConnectionString" 
                                   placeholder="Data Source=server;Initial Catalog=sensenet;Integrated Security=True">
                        </div>

                        <div class="mb-3">
                            <label for="repositoryPath" class="form-label">Repository Path</label>
                            <input type="text" class="form-control" id="repositoryPath" name="repositoryPath" required 
                                   placeholder="/Root/Sites/Default_Site" value="/Root/Content">
                            <div class="form-text">Path in the content repository to list items from</div>
                        </div>

                        <div class="mb-3">
                            <label for="source" class="form-label">Source</label>
                            <select class="form-select" id="source" name="source" required>
                                <option value="index">Index Only</option>
                                <option value="db">Database Only</option>
                                <option value="both" selected>Both Index and Database</option>
                            </select>
                            <div class="form-text">Where to list items from</div>
                        </div>

                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="recursive" name="recursive" checked>
                            <label class="form-check-label" for="recursive">List recursively</label>
                            <div class="form-text">Whether to list items recursively</div>
                        </div>

                        <div class="mb-3">
                            <label for="depth" class="form-label">Depth</label>
                            <input type="number" class="form-control" id="depth" name="depth" value="0" min="0">
                            <div class="form-text">Depth of recursion (0 = all descendants, 1 = direct children only)</div>
                        </div>

                        <button type="submit" class="btn btn-primary">List Items</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @if (Model.ShowResult)
    {
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5>Items Found</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert @Model.ResultClass" role="alert">
                            @Model.ResultMessage
                        </div>

                        @if (Model.ContentItems.Any())
                        {
                            <div class="table-responsive mt-4">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>NodeId</th>
                                            <th>Path</th>
                                            <th>Type</th>
                                            <th>In Database</th>
                                            <th>In Index</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.ContentItems)
                                        {
                                            <tr>
                                                <td>@item.NodeId</td>                                                <td>@item.Path</td>
                                                <td>@item.NodeType</td>
                                                <td>
                                                    @if (item.InDatabase)
                                                    {
                                                        <span class="badge bg-success">Yes</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">No</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (item.InIndex)
                                                    {
                                                        <span class="badge bg-success">Yes</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">No</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info mt-4">
                                No items found.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Custom index path
        document.getElementById('customIndexPath').addEventListener('input', function() {
            const dropdown = document.getElementById('indexPath');
            if (this.value) {
                dropdown.value = '';
                dropdown.disabled = true;
            } else {
                dropdown.disabled = false;
            }
        });

        // Custom connection string
        document.getElementById('customConnectionString').addEventListener('input', function() {
            const dropdown = document.getElementById('connectionString');
            if (this.value) {
                dropdown.value = '';
                dropdown.disabled = true;
            } else {
                dropdown.disabled = false;
            }
        });

        // Toggle connection string visibility based on source
        document.getElementById('source').addEventListener('change', function() {
            const dbFields = document.querySelectorAll('#connectionString, #customConnectionString');
            const dbSection = document.querySelector('label[for="connectionString"]').parentNode;
            
            if (this.value === 'index') {
                dbSection.style.opacity = '0.5';
                dbFields.forEach(field => field.disabled = true);
            } else {
                dbSection.style.opacity = '1';
                dbFields.forEach(field => field.disabled = false);
            }
        });

        // Initial setup
        if (document.getElementById('source').value === 'index') {
            const dbFields = document.querySelectorAll('#connectionString, #customConnectionString');
            const dbSection = document.querySelector('label[for="connectionString"]').parentNode;
            dbSection.style.opacity = '0.5';
            dbFields.forEach(field => field.disabled = true);
        }
    </script>
}
